// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")

}

model User {
  user_id                String   @id @default(cuid())
  image                  String?
  firstName              String
  lastName               String
  emailID                String   @unique
  MobileNo               String
  collegeName            String
  role                   Role
  emailVerified          Boolean  @default(false)
  forgotPasswordToken    String?
  emailVerificationToken String?
  verificationTokenExpiry DateTime?
  forgotPasswordExpiry    DateTime?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // Relations
  accounts               Account[]
  sessions               Session[]
  quizzes                Quiz[]   @relation("UserQuizzes")
}

enum Role {
  faculty
  student
}

model Quiz {
  id             String   @id @default(cuid())
  title          String
  description    String?
  quiz_owner_id  String
  start_time     DateTime
  end_time       DateTime
  status         QuizStatus @default(DRAFT)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  owner          User     @relation("UserQuizzes", fields: [quiz_owner_id], references: [user_id])
  @@index([title])
}

enum QuizStatus {
  DRAFT
  PUBLISHED
  ENDED
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? 
  access_token             String? 
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? 
  session_state            String?
  refresh_token_expires_in Int?
  
  user                     User    @relation(fields: [userId], references: [user_id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [user_id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
