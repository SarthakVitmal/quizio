// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String        @id @default(uuid())
  email          String        @unique
  name           String?
  createdQuizzes Quiz[]        @relation("UserCreatedQuizzes")
  participations Participant[] @relation("UserParticipations")
  createdAt      DateTime      @default(now())
  Account        Account[]
  Session        Session[]
}

model Quiz {
  id        String   @id @default(cuid())
  title     String
  creatorId String
  code      String   @unique
  startTime DateTime
  endTime   DateTime
  isEnded   Boolean  @default(false)
  createdAt DateTime @default(now())

  creator      User          @relation("UserCreatedQuizzes", fields: [creatorId], references: [id])
  questions    Question[]    @relation("QuizQuestions")
  participants Participant[] @relation("QuizParticipants")
}

model Question {
  id        String   @id @default(cuid())
  quizId    String
  text      String
  options   String[] // You can also normalize into separate table if needed
  answer    String // Correct answer
  createdAt DateTime @default(now())

  quiz Quiz @relation("QuizQuestions", fields: [quizId], references: [id])
}

model Participant {
  id       String   @id @default(cuid())
  quizId   String
  userId   String
  score    Int      @default(0)
  joinedAt DateTime @default(now())

  quiz Quiz @relation("QuizParticipants", fields: [quizId], references: [id])
  user User @relation("UserParticipations", fields: [userId], references: [id])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
