generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  createdAt      DateTime      @default(now())
  email          String        @unique
  id             String        @id @default(uuid())
  name           String?
  password       String
  Account        Account[]
  participations Participant[] @relation("UserParticipations")
  createdQuizzes Quiz[]        @relation("UserCreatedQuizzes")
  Session        Session[]
}

model Quiz {
  id           String        @id @default(cuid())
  title        String
  createdAt    DateTime      @default(now())
  subject      String
  code         String        @unique
  creatorId    String
  endTime      DateTime
  isEnded      Boolean       @default(false)
  startTime    DateTime
  participants Participant[] @relation("QuizParticipants")
  questions    Question[]    @relation("QuizQuestions")
  creator      User          @relation("UserCreatedQuizzes", fields: [creatorId], references: [id])
}

model Question {
  id        String   @id @default(cuid())
  quizId    String
  text      String
  options   String[]
  answer    String
  createdAt DateTime @default(now())
  quiz      Quiz     @relation("QuizQuestions", fields: [quizId], references: [id])
}

model Participant {
  id       String   @id @default(cuid())
  quizId   String
  userId   String
  score    Int      @default(0)
  joinedAt DateTime @default(now())
  quiz     Quiz     @relation("QuizParticipants", fields: [quizId], references: [id])
  user     User     @relation("UserParticipations", fields: [userId], references: [id])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
